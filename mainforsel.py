from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram import F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio
import os
from pathlib import Path

# –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
import os
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class UserState(StatesGroup):
    choosing_currency = State()
    choosing_game = State()
    in_catalog = State()
    entering_pubg_id = State()  # –î–ª—è PUBG
    entering_ff_id = State()    # –î–ª—è Free Fire
    confirming_order = State()

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –ê–¥–º–∏–Ω—ã (ID)
ADMINS = [6682444381, 6685271675]

# –û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä –∏ –∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (inline)
games = {
    "pubg": {
        "name": "PUBG Mobile",
        "categories": [
            {"text": "üíé –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ UC", "callback": "cat_pubg_uc"}
        ]
    },
    "freefire": {
        "name": "Free Fire",
        "categories": [
            {"text": "üíé –ê–ª–º–∞–∑—ã", "callback": "cat_ff_diamonds"},
            {"text": "üéüÔ∏è –í–∞—É—á–µ—Ä—ã –∏ –ø—Ä–æ–ø—É—Å–∫–∏", "callback": "cat_ff_vouchers"}
        ]
    },
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∏–≥—Ä—ã –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã
    "brawl": {
        "name": "Brawl Stars",
        "categories": []
    },
    "clash_clans": {
        "name": "Clash of Clans",
        "categories": []
    },
    "clash_royale": {
        "name": "Clash Royale",
        "categories": []
    },
    "standoff": {
        "name": "Standoff 2",
        "categories": []
    },
    "roblox": {
        "name": "Roblox",
        "categories": []
    }
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã (reply)
def get_currency_kb():
    kb = ReplyKeyboardBuilder()
    kb.add(KeyboardButton(text="üá∑üá∫ –†—É–±–ª–∏"))
    kb.add(KeyboardButton(text="üá∫üá¶ –ì—Ä–∏–≤–Ω—ã"))
    kb.add(KeyboardButton(text="üá∞üáø –¢–µ–Ω–≥–µ"))
    kb.add(KeyboardButton(text="‚Çø –ö—Ä–∏–ø—Ç–∞"))
    kb.add(KeyboardButton(text="üá∏üá≤ –°—É–º—ã"))
    kb.add(KeyboardButton(text="üáßüáæ –ë–µ–ª. –†—É–±–ª–∏"))
    kb.add(KeyboardButton(text="üá∞üá¨ –ö–∏—Ä–≥–∏–∑—Å–∫–∏–π —Å–æ–º"))
    return kb.as_markup(resize_keyboard=True)

# –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
def get_game_inline_kb():
    kb = InlineKeyboardBuilder()
    game_list = ["pubg", "freefire", "brawl", "clash_clans", "clash_royale", "standoff", "roblox"]
    game_names = {
        "pubg": "PUBG Mobile",
        "freefire": "Free Fire",
        "brawl": "Brawl Stars",
        "clash_clans": "Clash of Clans",
        "clash_royale": "Clash Royale",
        "standoff": "Standoff 2",
        "roblox": "Roblox"
    }
    
    for game_id in game_list:
        kb.button(text=game_names[game_id], callback_data=f"select_game_{game_id}")
    kb.adjust(3)
    return kb.as_markup()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (reply) ‚Äî 3 —Å—Ç—Ä–æ–∫–∏
def get_main_menu_kb():
    kb = ReplyKeyboardBuilder()
    kb.add(KeyboardButton(text="üõí –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤"))
    kb.row(KeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É"), KeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"))
    kb.row(KeyboardButton(text="üî• –û –õ–∞–≤–∫–µ –ú–∞—Ä–∏–æ"), KeyboardButton(text="? –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))
    return kb.as_markup(resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (inline)
def get_category_inline_kb(game_id):
    if game_id not in games:
        return None
    if game_id not in ["pubg", "freefire"]:
        return None
    kb = InlineKeyboardBuilder()
    for cat in games[game_id]["categories"]:
        kb.button(text=cat["text"], callback_data=cat["callback"])
    kb.adjust(1)
    return kb.as_markup()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)
def get_product_kb(game_id, category=None, page=1):
    items = []
    
    if game_id == "freefire":
        if category == "diamonds":
            items = [
                {"name": "110 –ê–ª–º–∞–∑–æ–≤", "price": 77},
                {"name": "341 –ê–ª–º–∞–∑", "price": 235},
                {"name": "572 –ê–ª–º–∞–∑–∞", "price": 397},
                {"name": "1166 –ê–ª–º–∞–∑–æ–≤", "price": 775},
                {"name": "2398 –ê–ª–º–∞–∑–æ–≤", "price": 1570},
                {"name": "6160 –ê–ª–º–∞–∑–æ–≤", "price": 3790},
            ]
        elif category == "vouchers":
            items = [
                {"name": "Evo Access (30 –¥–Ω–µ–π)", "price": 215},
                {"name": "Evo Access (3 –¥–Ω—è)", "price": 46},
                {"name": "Evo Access (7 –¥–Ω–µ–π)", "price": 75},
                {"name": "–ù–µ–¥–µ–ª—å–Ω—ã–π –≤–∞—É—á–µ—Ä –õ–∞–π—Ç", "price": 37},
                {"name": "–í–∞—É—á–µ—Ä –Ω–∞ –Ω–µ–¥–µ–ª—é", "price": 130},
                {"name": "–í–∞—É—á–µ—Ä –Ω–∞ –º–µ—Å—è—Ü", "price": 575},
            ]
        else:
            items = [
                {"name": "110 –ê–ª–º–∞–∑–æ–≤", "price": 77},
                {"name": "341 –ê–ª–º–∞–∑", "price": 235},
                {"name": "572 –ê–ª–º–∞–∑–∞", "price": 397},
                {"name": "1166 –ê–ª–º–∞–∑–æ–≤", "price": 775},
                {"name": "2398 –ê–ª–º–∞–∑–æ–≤", "price": 1570},
                {"name": "6160 –ê–ª–º–∞–∑–æ–≤", "price": 3790},
            ]
            
    elif game_id == "pubg":
        items = [
            {"name": "60 UC", "price": 75},
            {"name": "300 + 25 UC", "price": 385},
            {"name": "600 + 60 UC", "price": 765},
            {"name": "1500 + 300 UC", "price": 1920},
            {"name": "3000 + 850 UC", "price": 3780},
            {"name": "7000 + 1100 UC", "price": 7700},
        ]
    else:
        items = []

    if not items:
        return None

    per_page = 6
    total_pages = (len(items) + per_page - 1) // per_page
    start_idx = (page - 1) * per_page
    end_idx = min(start_idx + per_page, len(items))

    kb = InlineKeyboardBuilder()
    for i in range(start_idx, end_idx):
        item = items[i]
        kb.button(
            text=f"{item['name']} ‚Ä¢ {item['price']} ‚ÇΩ",
            callback_data=f"buy_{game_id}_{i}"
        )

    if total_pages > 1:
        if page > 1:
            kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prev_page_{game_id}_{category or 'default'}_{page}")
        if page < total_pages:
            kb.button(text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"next_page_{game_id}_{category or 'default'}_{page}")

    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_catalog")
    kb.adjust(2)
    return kb.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer("–ù–∞—á–Ω—ë–º —Å –ø—Ä–æ—Å—Ç–æ–≥–æ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–ª—è –≤–∞—Å –≤–∞–ª—é—Ç—É.\n–ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ—ë –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç üì•", reply_markup=get_currency_kb())
    await state.set_state(UserState.choosing_currency)

@dp.message(UserState.choosing_currency)
async def handle_currency(message: types.Message, state: FSMContext):
    currency = message.text
    user_data[message.from_user.id] = {"currency": currency, "game": None}
    await message.answer("üéØ –í—ã–±—Ä–∞–Ω–∞ –≤–∞–ª—é—Ç–∞: " + currency)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∏–≥—Ä:", reply_markup=get_game_inline_kb())
    await state.set_state(UserState.choosing_game)

@dp.callback_query(F.data.startswith("select_game_"))
async def select_game(callback: types.CallbackQuery, state: FSMContext):
    game_id = callback.data.split("_")[2]
    user_id = callback.from_user.id
    
    if game_id not in ["pubg", "freefire"]:
        await callback.message.answer("üéÆ –≠—Ç–∞ –∏–≥—Ä–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–∑–∂–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∏–≥—Ä—É.")
        return

    user_data[user_id]["game"] = game_id

    await callback.message.delete()

    photo_path = Path(__file__).parent / "pth.jpg"
    if not photo_path.exists():
        await callback.message.answer("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª pth.jpg –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await callback.message.answer_photo(
        photo=types.FSInputFile(photo_path),
        caption="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É üñ±Ô∏è",
        reply_markup=get_main_menu_kb()
    )
    await state.clear()

@dp.message(F.text == "üõí –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤")
async def catalog_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    game_id = user_data.get(user_id, {}).get("game")
    
    if not game_id:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É.")
        return
    
    if game_id not in ["pubg", "freefire"]:
        await message.answer("üéÆ –≠—Ç–∞ –∏–≥—Ä–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–∑–∂–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∏–≥—Ä—É.")
        return

    category_kb = get_category_inline_kb(game_id)
    if category_kb is None:
        await message.answer("üéÆ –≠—Ç–∞ –∏–≥—Ä–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–∑–∂–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∏–≥—Ä—É.")
        return
        
    await message.answer("üí° –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–µ–ª–∏ –±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏:", reply_markup=category_kb)
    await state.set_state(UserState.in_catalog)

@dp.message(F.text == "üî• –û –õ–∞–≤–∫–µ –ú–∞—Ä–∏–æ")
async def about_handler(message: types.Message):
    await message.answer("üî• –û –õ–∞–≤–∫–µ –ú–∞—Ä–∏–æ\n\n–õ–∞–≤–∫–∞ –ú–∞—Ä–∏–æ ‚Äî —ç—Ç–æ –≤–∞—à –Ω–∞–¥—ë–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω—ë—Ä –≤ –º–∏—Ä–µ –∏–≥—Ä–æ–≤—ã—Ö –ø–æ–∫—É–ø–æ–∫! –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ª—É—á—à–∏–µ —Ü–µ–Ω—ã, –±—ã—Å—Ç—Ä—É—é –¥–æ—Å—Ç–∞–≤–∫—É –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏. \n\n‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—è –∑–∞—â–∏—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n‚úÖ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ —Å–∫–∏–¥–∫–∏ –∏ –∞–∫—Ü–∏–∏\n‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7")

@dp.message(F.text == "? –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_handler(message: types.Message):
    await message.answer("‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞\n\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ —á–∞—Ç, –µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã. –ú—ã –±—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—Ç–∏–º!")

@dp.message(F.text == "üéÆ –ò–≥—Ä—ã –ú–∞—Ä–∏–æ")
async def games_handler(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=get_game_inline_kb())
    await state.set_state(UserState.choosing_game)

@dp.message(F.text == "üîÑ –°–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É")
async def change_game_handler(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É:", reply_markup=get_game_inline_kb())
    await state.set_state(UserState.choosing_game)

@dp.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def profile_handler(message: types.Message):
    user_id = message.from_user.id
    data = user_data.get(user_id, {})
    currency = data.get("currency", "–ù–µ –≤—ã–±—Ä–∞–Ω–∞")
    game_id = data.get("game", "–ù–µ –≤—ã–±—Ä–∞–Ω–∞")
    
    game_names = {
        "pubg": "PUBG Mobile",
        "freefire": "Free Fire",
        "brawl": "Brawl Stars",
        "clash_clans": "Clash of Clans",
        "clash_royale": "Clash Royale",
        "standoff": "Standoff 2",
        "roblox": "Roblox"
    }
    game_name = game_names.get(game_id, game_id) if game_id != "–ù–µ –≤—ã–±—Ä–∞–Ω–∞" else "–ù–µ –≤—ã–±—Ä–∞–Ω–∞"
    
    await message.answer(f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\nüéÆ –ò–≥—Ä–∞: {game_name}\nüí∞ –í–∞–ª—é—Ç–∞: {currency}")

@dp.callback_query(F.data.startswith("cat_"))
async def handle_category(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    game_id = user_data.get(user_id, {}).get("game")
    
    if not game_id or game_id not in ["pubg", "freefire"]:
        await callback.message.answer("üéÆ –≠—Ç–∞ –∏–≥—Ä–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–∑–∂–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∏–≥—Ä—É.")
        return

    category = None
    if callback.data == "cat_ff_diamonds":
        category = "diamonds"
    elif callback.data == "cat_ff_vouchers":
        category = "vouchers"
    elif callback.data == "cat_pubg_uc":
        category = "uc"
    
    await state.update_data(current_category=category)
    
    product_kb = get_product_kb(game_id, category)
    if product_kb is None:
        await callback.message.edit_text("üéÆ –≠—Ç–∞ –∏–≥—Ä–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–∑–∂–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∏–≥—Ä—É.")
        return
        
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –∂–µ–ª–∞–µ—Ç–µ –∫—É–ø–∏—Ç—å:", reply_markup=product_kb)

@dp.callback_query(F.data.startswith("buy_"))
async def buy_item(callback: types.CallbackQuery, state: FSMContext):
    data = callback.data.split("_")
    game_id = data[1]
    item_idx = int(data[2])
    
    items = []
    if game_id == "freefire":
        items = [
            {"name": "110 –ê–ª–º–∞–∑–æ–≤", "price": 77},
            {"name": "341 –ê–ª–º–∞–∑", "price": 235},
            {"name": "572 –ê–ª–º–∞–∑–∞", "price": 397},
            {"name": "1166 –ê–ª–º–∞–∑–æ–≤", "price": 775},
            {"name": "2398 –ê–ª–º–∞–∑–æ–≤", "price": 1570},
            {"name": "6160 –ê–ª–º–∞–∑–æ–≤", "price": 3790},
            {"name": "Evo Access (30 –¥–Ω–µ–π)", "price": 215},
            {"name": "Evo Access (3 –¥–Ω—è)", "price": 46},
            {"name": "Evo Access (7 –¥–Ω–µ–π)", "price": 75},
            {"name": "–ù–µ–¥–µ–ª—å–Ω—ã–π –≤–∞—É—á–µ—Ä –õ–∞–π—Ç", "price": 37},
            {"name": "–í–∞—É—á–µ—Ä –Ω–∞ –Ω–µ–¥–µ–ª—é", "price": 130},
            {"name": "–í–∞—É—á–µ—Ä –Ω–∞ –º–µ—Å—è—Ü", "price": 575},
        ]
    elif game_id == "pubg":
        items = [
            {"name": "60 UC", "price": 75},
            {"name": "300 + 25 UC", "price": 385},
            {"name": "600 + 60 UC", "price": 765},
            {"name": "1500 + 300 UC", "price": 1920},
            {"name": "3000 + 850 UC", "price": 3780},
            {"name": "7000 + 1100 UC", "price": 7700},
        ]

    item = items[item_idx]
    cancel_kb = InlineKeyboardBuilder()
    cancel_kb.button(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_order")

    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {item['name']}\n\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {item['price']} ‚ÇΩ\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à {games[game_id]['name']} ID (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12345678):",
        reply_markup=cancel_kb.as_markup()
    )
    await state.update_data(item=item, game_id=game_id)
    if game_id == "pubg":
        await state.set_state(UserState.entering_pubg_id)
    else:
        await state.set_state(UserState.entering_ff_id)

@dp.message(UserState.entering_pubg_id)
async def handle_pubg_id(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await message.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.")
        await state.clear()
        return

    pubg_id = message.text.strip()
    if not pubg_id.isdigit():
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π PUBG ID (—Ü–∏—Ñ—Ä—ã).")
        return

    data = await state.get_data()
    item = data["item"]
    game_id = data["game_id"]
    username = f"@{message.from_user.username}" if message.from_user.username else "–ù–µ—Ç –Ω–∏–∫–∞"

    order_msg = (
        f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑\n\n"
        f"üéÆ –ò–≥—Ä–∞: {games[game_id]['name']}\n"
        f"üõí –¢–æ–≤–∞—Ä: {item['name']}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {item['price']} ‚ÇΩ\n"
        f"üÜî PUBG ID: {pubg_id}\n\n"
        f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n"
        f"2200701994814470 (–¢ –ë–ê–ù–ö)\n"
        f"üí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É (–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω): {username}\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É'."
    )

    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_payment_{message.from_user.id}_{item['name']}_{item['price']}_{pubg_id}")
    kb.adjust(1)

    await message.answer(order_msg, reply_markup=kb.as_markup())
    await state.set_state(UserState.confirming_order)

@dp.message(UserState.entering_ff_id)
async def handle_ff_id(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await message.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.")
        await state.clear()
        return

    ff_id = message.text.strip()
    if not ff_id.isdigit():
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π FreeFire ID (—Ü–∏—Ñ—Ä—ã).")
        return

    data = await state.get_data()
    item = data["item"]
    game_id = data["game_id"]
    username = f"@{message.from_user.username}" if message.from_user.username else "–ù–µ—Ç –Ω–∏–∫–∞"

    order_msg = (
        f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑\n\n"
        f"üéÆ –ò–≥—Ä–∞: {games[game_id]['name']}\n"
        f"üõí –¢–æ–≤–∞—Ä: {item['name']}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {item['price']} ‚ÇΩ\n"
        f"üÜî FreeFire ID: {ff_id}\n\n"
        f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n"
        f"2200701994814470 (–¢ –ë–ê–ù–ö)\n"
        f"üí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É (–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω): {username}\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É'."
    )

    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_payment_{message.from_user.id}_{item['name']}_{item['price']}_{ff_id}")
    kb.adjust(1)

    await message.answer(order_msg, reply_markup=kb.as_markup())
    await state.set_state(UserState.confirming_order)

@dp.callback_query(F.data.startswith("confirm_payment_"))
async def confirm_payment(callback: types.CallbackQuery):
    data = callback.data.split("_")
    user_id = int(data[2])
    item_name = data[3]
    price = int(data[4])
    player_id = data[5]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø ID –ø–æ –Ω–∞–ª–∏—á–∏—é –≤ –¥–∞–Ω–Ω—ã—Ö
    game_id = "pubg" if "pubg" in item_name.lower() or "uc" in item_name.lower() else "freefire"
    id_type = "PUBG ID" if game_id == "pubg" else "FreeFire ID"

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        user = await bot.get_chat(user_id)
        username = f"@{user.username}" if user.username else "–ù–µ—Ç –Ω–∏–∫–∞"
        user_link = f"[{user.full_name}](tg://user?id={user_id})" if not user.username else f"@{user.username}"
    except:
        username = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        user_link = f"ID: {user_id}"

    admin_message = (
        f"üì© –ù–æ–≤—ã–π –∑–∞–∫–∞–∑\n\n"
        f"üéÆ –ò–≥—Ä–∞: {games[game_id]['name']}\n"
        f"üõí –¢–æ–≤–∞—Ä: {item_name}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price} ‚ÇΩ\n"
        f"üÜî {id_type}: {player_id}\n"
        f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {user_link} ({username})"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–±–æ–∏–º –∞–¥–º–∏–Ω–∞–º
    for admin_id in ADMINS:
        try:
            await bot.send_message(
                chat_id=admin_id,
                text=admin_message,
                parse_mode="Markdown"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback.message.edit_text(
        f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
        f"–¢–æ–≤–∞—Ä: {item_name}\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price} ‚ÇΩ\n"
        f"{id_type}: {player_id}\n\n"
        f"–û–∂–∏–¥–∞–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É!"
    )

@dp.callback_query(F.data.startswith("prev_page_"))
async def prev_page(callback: types.CallbackQuery):
    data = callback.data.split("_")
    game_id = data[1]
    category = data[2] if data[2] != 'default' else None
    page = int(data[3]) - 1
    product_kb = get_product_kb(game_id, category, page)
    if product_kb:
        await callback.message.edit_reply_markup(reply_markup=product_kb)

@dp.callback_query(F.data.startswith("next_page_"))
async def next_page(callback: types.CallbackQuery):
    data = callback.data.split("_")
    game_id = data[1]
    category = data[2] if data[2] != 'default' else None
    page = int(data[3]) + 1
    product_kb = get_product_kb(game_id, category, page)
    if product_kb:
        await callback.message.edit_reply_markup(reply_markup=product_kb)

@dp.callback_query(F.data == "back_to_catalog")
async def back_to_catalog(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    game_id = user_data.get(user_id, {}).get("game")
    
    if not game_id or game_id not in ["pubg", "freefire"]:
        await callback.message.answer("üéÆ –≠—Ç–∞ –∏–≥—Ä–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–∑–∂–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∏–≥—Ä—É.")
        return
        
    category_kb = get_category_inline_kb(game_id)
    if category_kb is None:
        await callback.message.edit_text("üéÆ –≠—Ç–∞ –∏–≥—Ä–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–∑–∂–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∏–≥—Ä—É.")
        return
        
    await callback.message.edit_text("üí° –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–µ–ª–∏ –±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏:", reply_markup=category_kb)

@dp.callback_query(F.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    game_id = user_data.get(user_id, {}).get("game")
    
    if not game_id or game_id not in ["pubg", "freefire"]:
        await callback.message.answer("üéÆ –≠—Ç–∞ –∏–≥—Ä–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–∑–∂–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∏–≥—Ä—É.")
        return
        
    await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_menu_kb())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())